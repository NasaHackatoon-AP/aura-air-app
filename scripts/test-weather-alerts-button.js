// Script para testar o bot√£o de refresh dos Alertas Meteorol√≥gicos
const testWeatherAlertsButton = async () => {
  console.log("üîÑ Testando Bot√£o de Refresh dos Alertas Meteorol√≥gicos...\n");

  // Testar a API
  console.log("1. Testando API de Condi√ß√µes Meteorol√≥gicas...");
  try {
    const response = await fetch(
      "http://localhost:3002/api/weather-conditions"
    );

    if (response.ok) {
      const data = await response.json();
      console.log("‚úÖ API funcionando");
      console.log(`   Cidade: ${data.clima.cidade}`);
      console.log(`   Temperatura: ${data.clima.temperatura}¬∞C`);
      console.log(`   Umidade: ${data.clima.umidade}%`);
      console.log(`   Vento: ${data.clima.vento} km/h`);
      console.log(`   Descri√ß√£o: ${data.clima.descricao}`);
      console.log(`   AQI: ${data.aqi_personalizado}`);
    } else {
      console.log(`‚ùå API com problemas: Status ${response.status}`);
    }
  } catch (error) {
    console.log(`‚ùå Erro na API: ${error.message}`);
  }

  console.log("\n2. Melhorias Implementadas no Bot√£o:");
  console.log("‚úÖ Bot√£o agora aparece em TODOS os estados do card");
  console.log("‚úÖ Estado 'Nenhum alerta ativo' - Bot√£o vis√≠vel");
  console.log("‚úÖ Estado 'Com alertas' - Bot√£o vis√≠vel");
  console.log("‚úÖ Estado 'Erro' - Bot√£o 'Tentar novamente'");
  console.log("‚úÖ Estado 'Loading' - Bot√£o com anima√ß√£o");

  console.log("\n3. Caracter√≠sticas do Bot√£o:");
  console.log("‚úÖ Posi√ß√£o: Canto superior direito do card");
  console.log("‚úÖ √çcone: üîÑ (RefreshCw) quando inativo");
  console.log("‚úÖ √çcone: ‚è≥ (Loader2) quando ativo");
  console.log("‚úÖ Tamanho: Bot√£o pequeno (size='sm')");
  console.log("‚úÖ Estilo: Outline com hover");
  console.log("‚úÖ Tooltip: 'Atualizar alertas meteorol√≥gicos'");

  console.log("\n4. Estados do Bot√£o:");
  console.log("‚úÖ Normal: √çcone üîÑ, clic√°vel");
  console.log("‚úÖ Loading: √çcone ‚è≥ com anima√ß√£o, desabilitado");
  console.log("‚úÖ Error: Bot√£o 'Tentar novamente' (full width)");
  console.log("‚úÖ Hover: Mudan√ßa de cor de fundo");

  console.log("\n5. Funcionalidades:");
  console.log("‚úÖ Atualiza dados meteorol√≥gicos em tempo real");
  console.log("‚úÖ Recalcula alertas baseados nos novos dados");
  console.log("‚úÖ Atualiza timestamp da √∫ltima atualiza√ß√£o");
  console.log("‚úÖ Trata erros de rede graciosamente");
  console.log("‚úÖ Auto-refresh a cada 10 minutos");

  console.log("\n6. Alertas que Podem ser Gerados:");
  console.log("‚úÖ Chuva Forte: Umidade > 80% ou descri√ß√£o com 'chuva'");
  console.log("‚úÖ √çndice UV Alto: Baseado na hora e condi√ß√µes do c√©u");
  console.log("‚úÖ Vento Forte: Velocidade > 15 km/h");
  console.log("‚úÖ Calor Intenso: Temperatura > 35¬∞C");
  console.log("‚úÖ Frio Intenso: Temperatura < 10¬∞C");
  console.log("‚úÖ Qualidade do Ar: AQI > 100");

  console.log("\n7. Dados Atuais (que podem gerar alertas):");
  console.log("   - Temperatura: 26.96¬∞C (normal)");
  console.log("   - Umidade: 58% (normal)");
  console.log("   - Vento: 3.6 km/h (normal)");
  console.log("   - Descri√ß√£o: 'c√©u limpo' (pode gerar UV alto)");
  console.log("   - AQI: 70 (normal)");

  console.log("\nüéØ Para testar na interface:");
  console.log("1. Acesse: http://localhost:3002/dashboard");
  console.log("2. Procure pelo card 'Alertas Meteorol√≥gicos'");
  console.log(
    "3. O bot√£o de refresh (üîÑ) deve estar no canto superior direito"
  );
  console.log("4. Clique no bot√£o para atualizar os dados");
  console.log("5. Observe o √≠cone mudar para loading (‚è≥)");
  console.log("6. Verifique o timestamp da √∫ltima atualiza√ß√£o");

  console.log(
    "\n‚úÖ Bot√£o de Refresh dos Alertas Meteorol√≥gicos implementado e funcionando!"
  );
};

// Executar teste
testWeatherAlertsButton();
