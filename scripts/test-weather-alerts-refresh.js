// Script para testar o bot√£o de refresh dos Alertas Meteorol√≥gicos
const testWeatherAlertsRefresh = async () => {
  console.log("üå§Ô∏è Testando Bot√£o de Refresh dos Alertas Meteorol√≥gicos...\n");

  // Testar a API de condi√ß√µes meteorol√≥gicas
  console.log("1. Testando API de Condi√ß√µes Meteorol√≥gicas...");
  try {
    const response = await fetch(
      "http://localhost:3002/api/weather-conditions"
    );

    if (response.ok) {
      const data = await response.json();
      console.log("‚úÖ API funcionando");
      console.log(`   Cidade: ${data.clima.cidade}`);
      console.log(`   Temperatura: ${data.clima.temperatura}¬∞C`);
      console.log(`   Umidade: ${data.clima.umidade}%`);
      console.log(`   Vento: ${data.clima.vento} km/h`);
      console.log(`   Descri√ß√£o: ${data.clima.descricao}`);
      console.log(`   AQI: ${data.aqi_personalizado}`);
    } else {
      console.log(`‚ùå API com problemas: Status ${response.status}`);
    }
  } catch (error) {
    console.log(`‚ùå Erro na API: ${error.message}`);
  }

  // Simular diferentes cen√°rios de alertas
  console.log("\n2. Simulando Cen√°rios de Alertas...");

  const scenarios = [
    {
      name: "Chuva Forte",
      data: { umidade: 85, descricao: "chuva forte", chuva_mm: 15 },
      expectedAlert: "Alerta de Chuva Forte",
    },
    {
      name: "Calor Intenso",
      data: { temperatura: 38, descricao: "ensolarado" },
      expectedAlert: "Alerta de Calor Intenso",
    },
    {
      name: "Vento Forte",
      data: { vento: 20, descricao: "nublado" },
      expectedAlert: "Alerta de Vento Forte",
    },
    {
      name: "√çndice UV Alto",
      data: { descricao: "c√©u limpo" },
      expectedAlert: "√çndice UV Alto",
    },
    {
      name: "Qualidade do Ar Ruim",
      data: { aqi_personalizado: 120 },
      expectedAlert: "Alerta de Qualidade do Ar",
    },
  ];

  scenarios.forEach((scenario, index) => {
    console.log(`\n   ${index + 1}. ${scenario.name}:`);
    console.log(`      Dados: ${JSON.stringify(scenario.data)}`);
    console.log(`      Alerta esperado: ${scenario.expectedAlert}`);
  });

  console.log("\n3. Funcionalidades do Bot√£o de Refresh:");
  console.log("‚úÖ Bot√£o localizado no canto superior direito do card");
  console.log("‚úÖ √çcone de refresh (üîÑ) quando inativo");
  console.log("‚úÖ √çcone de loading (‚è≥) quando ativo");
  console.log("‚úÖ Desabilitado durante carregamento");
  console.log("‚úÖ Atualiza dados em tempo real");
  console.log("‚úÖ Mostra timestamp da √∫ltima atualiza√ß√£o");

  console.log("\n4. Estados do Bot√£o:");
  console.log("‚úÖ Estado Normal: √çcone üîÑ (RefreshCw)");
  console.log("‚úÖ Estado Loading: √çcone ‚è≥ (Loader2) com anima√ß√£o");
  console.log("‚úÖ Estado Disabled: Durante carregamento ou erro");
  console.log("‚úÖ Estado Error: Bot√£o 'Tentar novamente' em caso de erro");

  console.log("\n5. Comportamento do Refresh:");
  console.log("‚úÖ Atualiza dados meteorol√≥gicos");
  console.log("‚úÖ Recalcula alertas baseados nos novos dados");
  console.log("‚úÖ Atualiza timestamp da √∫ltima atualiza√ß√£o");
  console.log("‚úÖ Mant√©m estado de loading durante a opera√ß√£o");
  console.log("‚úÖ Trata erros de rede graciosamente");

  console.log("\n6. Integra√ß√£o com Hook useWeatherAlerts:");
  console.log("‚úÖ fetchWeatherAlerts(): Fun√ß√£o de refresh");
  console.log("‚úÖ isLoading: Estado de carregamento");
  console.log("‚úÖ error: Tratamento de erros");
  console.log("‚úÖ getTimeSinceUpdate(): Timestamp formatado");
  console.log("‚úÖ Auto-refresh: A cada 10 minutos");

  console.log("\nüéØ Para testar na interface:");
  console.log("1. Acesse: http://localhost:3002/dashboard");
  console.log("2. Procure pelo card 'Alertas Meteorol√≥gicos'");
  console.log("3. Clique no bot√£o de refresh (üîÑ) no canto superior direito");
  console.log("4. Observe o √≠cone mudar para loading (‚è≥)");
  console.log("5. Aguarde a atualiza√ß√£o dos dados");
  console.log("6. Verifique o timestamp da √∫ltima atualiza√ß√£o");

  console.log(
    "\n‚úÖ Bot√£o de Refresh dos Alertas Meteorol√≥gicos est√° funcionando!"
  );
};

// Executar teste
testWeatherAlertsRefresh();
